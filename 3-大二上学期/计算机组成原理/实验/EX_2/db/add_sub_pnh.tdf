--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Stratix II" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=8 ONE_INPUT_IS_CONSTANT="NO" add_sub cout dataa datab overflow result
--VERSION_BEGIN 9.1SP2 cbx_cycloneii 2010:03:24:20:43:43:SJ cbx_lpm_add_sub 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ cbx_stratix 2010:03:24:20:43:43:SJ cbx_stratixii 2010:03:24:20:43:43:SJ  VERSION_END


-- Copyright (C) 1991-2010 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION stratixii_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, sharein)
WITH ( EXTENDED_LUT, LUT_MASK, SHARED_ARITH)
RETURNS ( combout, cout, shareout, sumout);

--synthesis_resources = lut 8 
SUBDESIGN add_sub_pnh
( 
	add_sub	:	input;
	cout	:	output;
	dataa[7..0]	:	input;
	datab[7..0]	:	input;
	overflow	:	output;
	result[7..0]	:	output;
) 
VARIABLE 
	add_sub_cella[7..0] : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "00000FF00000FF00",
			SHARED_ARITH = "off"
		);
	lsb_cin_wire[0..0]	: WIRE;
	overflow_wire[0..0]	: WIRE;

BEGIN 
	add_sub_cella[].cin = ( add_sub_cella[6..0].cout, lsb_cin_wire[]);
	add_sub_cella[].datac = add_sub;
	add_sub_cella[].datad = dataa[];
	add_sub_cella[].dataf = datab[];
	cout = add_sub_cella[7].cout;
	lsb_cin_wire[] = (! add_sub);
	overflow = overflow_wire[];
	overflow_wire[] = (((! (dataa[7..7] $ datab[7..7])) $ (! add_sub)) & (dataa[7..7] $ add_sub_cella[7].sumout));
	result[] = ( add_sub_cella[7..0].sumout);
END;
--VALID FILE
