// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2021 18:24:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    EX_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EX_4_vlg_sample_tst(
	Clk,
	Clr,
	GRin,
	GRout,
	GRsel,
	IRin,
	MARin,
	MDRin,
	MDRout,
	MEMRd,
	MEMWr,
	op,
	PC_1,
	PCin,
	PCout,
	Yin,
	Zin,
	Zout,
	sampler_tx
);
input  Clk;
input  Clr;
input  GRin;
input  GRout;
input  GRsel;
input  IRin;
input  MARin;
input  MDRin;
input  MDRout;
input  MEMRd;
input  MEMWr;
input [1:0] op;
input  PC_1;
input  PCin;
input  PCout;
input  Yin;
input  Zin;
input  Zout;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or Clr or GRin or GRout or GRsel or IRin or MARin or MDRin or MDRout or MEMRd or MEMWr or op or PC_1 or PCin or PCout or Yin or Zin or Zout)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module EX_4_vlg_check_tst (
	BUS,
	CF,
	IR,
	OF,
	PC,
	SF,
	ZF,
	sampler_rx
);
input [7:0] BUS;
input  CF;
input [7:0] IR;
input  OF;
input [7:0] PC;
input  SF;
input  ZF;
input sampler_rx;

reg [7:0] BUS_expected;
reg  CF_expected;
reg [7:0] IR_expected;
reg  OF_expected;
reg [7:0] PC_expected;
reg  SF_expected;
reg  ZF_expected;

reg [7:0] BUS_prev;
reg  CF_prev;
reg [7:0] IR_prev;
reg  OF_prev;
reg [7:0] PC_prev;
reg  SF_prev;
reg  ZF_prev;

reg [7:0] BUS_expected_prev;
reg [7:0] IR_expected_prev;
reg [7:0] PC_expected_prev;

reg [7:0] last_BUS_exp;
reg [7:0] last_IR_exp;
reg [7:0] last_PC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	BUS_prev = BUS;
	CF_prev = CF;
	IR_prev = IR;
	OF_prev = OF;
	PC_prev = PC;
	SF_prev = SF;
	ZF_prev = ZF;
end

// update expected /o prevs

always @(trigger)
begin
	BUS_expected_prev = BUS_expected;
	IR_expected_prev = IR_expected;
	PC_expected_prev = PC_expected;
end


// expected BUS[ 7 ]
initial
begin
	BUS_expected[7] = 1'bX;
end 
// expected BUS[ 6 ]
initial
begin
	BUS_expected[6] = 1'bX;
end 
// expected BUS[ 5 ]
initial
begin
	BUS_expected[5] = 1'bX;
end 
// expected BUS[ 4 ]
initial
begin
	BUS_expected[4] = 1'bX;
end 
// expected BUS[ 3 ]
initial
begin
	BUS_expected[3] = 1'bX;
end 
// expected BUS[ 2 ]
initial
begin
	BUS_expected[2] = 1'bX;
end 
// expected BUS[ 1 ]
initial
begin
	BUS_expected[1] = 1'bX;
end 
// expected BUS[ 0 ]
initial
begin
	BUS_expected[0] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected IR[ 7 ]
initial
begin
	IR_expected[7] = 1'bX;
end 
// expected IR[ 6 ]
initial
begin
	IR_expected[6] = 1'bX;
end 
// expected IR[ 5 ]
initial
begin
	IR_expected[5] = 1'bX;
end 
// expected IR[ 4 ]
initial
begin
	IR_expected[4] = 1'bX;
end 
// expected IR[ 3 ]
initial
begin
	IR_expected[3] = 1'bX;
end 
// expected IR[ 2 ]
initial
begin
	IR_expected[2] = 1'bX;
end 
// expected IR[ 1 ]
initial
begin
	IR_expected[1] = 1'bX;
end 
// expected IR[ 0 ]
initial
begin
	IR_expected[0] = 1'bX;
end 
// generate trigger
always @(BUS_expected or BUS or CF_expected or CF or IR_expected or IR or OF_expected or OF or PC_expected or PC or SF_expected or SF or ZF_expected or ZF)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BUS = %b | expected CF = %b | expected IR = %b | expected OF = %b | expected PC = %b | expected SF = %b | expected ZF = %b | ",BUS_expected_prev,CF_expected_prev,IR_expected_prev,OF_expected_prev,PC_expected_prev,SF_expected_prev,ZF_expected_prev);
	$display("| real BUS = %b | real CF = %b | real IR = %b | real OF = %b | real PC = %b | real SF = %b | real ZF = %b | ",BUS_prev,CF_prev,IR_prev,OF_prev,PC_prev,SF_prev,ZF_prev);
`endif
	if (
		( BUS_expected_prev[0] !== 1'bx ) && ( BUS_prev[0] !== BUS_expected_prev[0] )
		&& ((BUS_expected_prev[0] !== last_BUS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[0] = BUS_expected_prev[0];
	end
	if (
		( BUS_expected_prev[1] !== 1'bx ) && ( BUS_prev[1] !== BUS_expected_prev[1] )
		&& ((BUS_expected_prev[1] !== last_BUS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[1] = BUS_expected_prev[1];
	end
	if (
		( BUS_expected_prev[2] !== 1'bx ) && ( BUS_prev[2] !== BUS_expected_prev[2] )
		&& ((BUS_expected_prev[2] !== last_BUS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[2] = BUS_expected_prev[2];
	end
	if (
		( BUS_expected_prev[3] !== 1'bx ) && ( BUS_prev[3] !== BUS_expected_prev[3] )
		&& ((BUS_expected_prev[3] !== last_BUS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[3] = BUS_expected_prev[3];
	end
	if (
		( BUS_expected_prev[4] !== 1'bx ) && ( BUS_prev[4] !== BUS_expected_prev[4] )
		&& ((BUS_expected_prev[4] !== last_BUS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[4] = BUS_expected_prev[4];
	end
	if (
		( BUS_expected_prev[5] !== 1'bx ) && ( BUS_prev[5] !== BUS_expected_prev[5] )
		&& ((BUS_expected_prev[5] !== last_BUS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[5] = BUS_expected_prev[5];
	end
	if (
		( BUS_expected_prev[6] !== 1'bx ) && ( BUS_prev[6] !== BUS_expected_prev[6] )
		&& ((BUS_expected_prev[6] !== last_BUS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[6] = BUS_expected_prev[6];
	end
	if (
		( BUS_expected_prev[7] !== 1'bx ) && ( BUS_prev[7] !== BUS_expected_prev[7] )
		&& ((BUS_expected_prev[7] !== last_BUS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[7] = BUS_expected_prev[7];
	end
	if (
		( IR_expected_prev[0] !== 1'bx ) && ( IR_prev[0] !== IR_expected_prev[0] )
		&& ((IR_expected_prev[0] !== last_IR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[0] = IR_expected_prev[0];
	end
	if (
		( IR_expected_prev[1] !== 1'bx ) && ( IR_prev[1] !== IR_expected_prev[1] )
		&& ((IR_expected_prev[1] !== last_IR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[1] = IR_expected_prev[1];
	end
	if (
		( IR_expected_prev[2] !== 1'bx ) && ( IR_prev[2] !== IR_expected_prev[2] )
		&& ((IR_expected_prev[2] !== last_IR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[2] = IR_expected_prev[2];
	end
	if (
		( IR_expected_prev[3] !== 1'bx ) && ( IR_prev[3] !== IR_expected_prev[3] )
		&& ((IR_expected_prev[3] !== last_IR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[3] = IR_expected_prev[3];
	end
	if (
		( IR_expected_prev[4] !== 1'bx ) && ( IR_prev[4] !== IR_expected_prev[4] )
		&& ((IR_expected_prev[4] !== last_IR_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[4] = IR_expected_prev[4];
	end
	if (
		( IR_expected_prev[5] !== 1'bx ) && ( IR_prev[5] !== IR_expected_prev[5] )
		&& ((IR_expected_prev[5] !== last_IR_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[5] = IR_expected_prev[5];
	end
	if (
		( IR_expected_prev[6] !== 1'bx ) && ( IR_prev[6] !== IR_expected_prev[6] )
		&& ((IR_expected_prev[6] !== last_IR_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[6] = IR_expected_prev[6];
	end
	if (
		( IR_expected_prev[7] !== 1'bx ) && ( IR_prev[7] !== IR_expected_prev[7] )
		&& ((IR_expected_prev[7] !== last_IR_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[7] = IR_expected_prev[7];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module EX_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Clr;
reg GRin;
reg GRout;
reg GRsel;
reg IRin;
reg MARin;
reg MDRin;
reg MDRout;
reg MEMRd;
reg MEMWr;
reg [1:0] op;
reg PC_1;
reg PCin;
reg PCout;
reg Yin;
reg Zin;
reg Zout;
// wires                                               
wire [7:0] BUS;
wire CF;
wire [7:0] IR;
wire OF;
wire [7:0] PC;
wire SF;
wire ZF;

wire sampler;                             

// assign statements (if any)                          
EX_4 i1 (
// port map - connection between master ports and signals/registers   
	.BUS(BUS),
	.CF(CF),
	.Clk(Clk),
	.Clr(Clr),
	.GRin(GRin),
	.GRout(GRout),
	.GRsel(GRsel),
	.IR(IR),
	.IRin(IRin),
	.MARin(MARin),
	.MDRin(MDRin),
	.MDRout(MDRout),
	.MEMRd(MEMRd),
	.MEMWr(MEMWr),
	.OF(OF),
	.op(op),
	.PC(PC),
	.PC_1(PC_1),
	.PCin(PCin),
	.PCout(PCout),
	.SF(SF),
	.Yin(Yin),
	.ZF(ZF),
	.Zin(Zin),
	.Zout(Zout)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #5000 1'b1;
	#5000;
end 

// Clr
initial
begin
	Clr = 1'b1;
	Clr = #20000 1'b0;
end 

// PC_1
initial
begin
	PC_1 = 1'b0;
	PC_1 = #30000 1'b1;
	PC_1 = #10000 1'b0;
	PC_1 = #80000 1'b1;
	PC_1 = #10000 1'b0;
	PC_1 = #80000 1'b1;
	PC_1 = #10000 1'b0;
end 

// PCout
initial
begin
	PCout = 1'b0;
	PCout = #20000 1'b1;
	PCout = #10000 1'b0;
	PCout = #80000 1'b1;
	PCout = #10000 1'b0;
	PCout = #80000 1'b1;
	PCout = #10000 1'b0;
end 

// PCin
initial
begin
	PCin = 1'b0;
end 

// GRsel
initial
begin
	GRsel = 1'b0;
	GRsel = #50000 1'b1;
	GRsel = #10000 1'b0;
	GRsel = #80000 1'b1;
	GRsel = #10000 1'b0;
	GRsel = #90000 1'b1;
	GRsel = #10000 1'b0;
end 

// GRout
initial
begin
	GRout = 1'b0;
	GRout = #50000 1'b1;
	GRout = #10000 1'b0;
	GRout = #80000 1'b1;
	GRout = #10000 1'b0;
	GRout = #90000 1'b1;
	GRout = #10000 1'b0;
end 

// GRin
initial
begin
	GRin = 1'b0;
	GRin = #70000 1'b1;
	GRin = #10000 1'b0;
	GRin = #80000 1'b1;
	GRin = #10000 1'b0;
	GRin = #60000 1'b1;
	GRin = #10000 1'b0;
	GRin = #10000 1'b1;
	GRin = #10000 1'b0;
end 

// IRin
initial
begin
	IRin = 1'b0;
	IRin = #40000 1'b1;
	IRin = #10000 1'b0;
	IRin = #80000 1'b1;
	IRin = #10000 1'b0;
	IRin = #80000 1'b1;
	IRin = #10000 1'b0;
end 

// MARin
initial
begin
	MARin = 1'b0;
	MARin = #20000 1'b1;
	MARin = #10000 1'b0;
	MARin = #20000 1'b1;
	MARin = #10000 1'b0;
	MARin = #50000 1'b1;
	MARin = #10000 1'b0;
	MARin = #20000 1'b1;
	MARin = #10000 1'b0;
	MARin = #50000 1'b1;
	MARin = #10000 1'b0;
end 

// MDRout
initial
begin
	MDRout = 1'b0;
	MDRout = #40000 1'b1;
	MDRout = #10000 1'b0;
	MDRout = #20000 1'b1;
	MDRout = #10000 1'b0;
	MDRout = #50000 1'b1;
	MDRout = #10000 1'b0;
	MDRout = #20000 1'b1;
	MDRout = #10000 1'b0;
	MDRout = #50000 1'b1;
	MDRout = #10000 1'b0;
end 

// MDRin
initial
begin
	MDRin = 1'b0;
end 

// MEMRd
initial
begin
	MEMRd = 1'b0;
	MEMRd = #30000 1'b1;
	MEMRd = #20000 1'b0;
	MEMRd = #10000 1'b1;
	MEMRd = #20000 1'b0;
	MEMRd = #40000 1'b1;
	MEMRd = #20000 1'b0;
	MEMRd = #10000 1'b1;
	MEMRd = #20000 1'b0;
	MEMRd = #40000 1'b1;
	MEMRd = #20000 1'b0;
end 

// MEMWr
initial
begin
	MEMWr = 1'b0;
end 
// op[ 1 ]
initial
begin
	op[1] = 1'b0;
end 
// op[ 0 ]
initial
begin
	op[0] = 1'b0;
	op[0] = #240000 1'b1;
	op[0] = #10000 1'b0;
end 

// Yin
initial
begin
	Yin = 1'b0;
	Yin = #230000 1'b1;
	Yin = #10000 1'b0;
end 

// Zout
initial
begin
	Zout = 1'b0;
	Zout = #250000 1'b1;
	Zout = #10000 1'b0;
end 

// Zin
initial
begin
	Zin = 1'b0;
	Zin = #240000 1'b1;
	Zin = #10000 1'b0;
end 

EX_4_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.Clr(Clr),
	.GRin(GRin),
	.GRout(GRout),
	.GRsel(GRsel),
	.IRin(IRin),
	.MARin(MARin),
	.MDRin(MDRin),
	.MDRout(MDRout),
	.MEMRd(MEMRd),
	.MEMWr(MEMWr),
	.op(op),
	.PC_1(PC_1),
	.PCin(PCin),
	.PCout(PCout),
	.Yin(Yin),
	.Zin(Zin),
	.Zout(Zout),
	.sampler_tx(sampler)
);

EX_4_vlg_check_tst tb_out(
	.BUS(BUS),
	.CF(CF),
	.IR(IR),
	.OF(OF),
	.PC(PC),
	.SF(SF),
	.ZF(ZF),
	.sampler_rx(sampler)
);
endmodule

